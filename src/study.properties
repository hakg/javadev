JAVA 요약

JAVA 장점
1. JAVA는 운영체제와는 독립적으로 실행할 수 있습니다.
2. JAVA는 불필요한 기능을 과감히 제거하여 다른 언어에 비해 배우기가 쉽습니다.
3. JAVA는 자동 메모리 관리 등을 지원하여 다른 언어에 비해 안정성이 높습니다.
4. JAVA는 연산자 오버로딩을 금지하고 제네릭을 도입함으로써 코드의 가독성을 높였습니다.
5. JAVA에 관한 수많은 참고 자료를 찾을 수 있습니다.

JAVA 단점
1. 자바는 실행을 위해 자바 가상 머신을 거쳐야 하므로, 다른 언어에 비해 실행 속도가 느립니다.
2. 자바는 예외 처리가 잘 되어 있지만, 개발자가 일일이 처리를 지정해 줘야 한다는 불편함이 있습니다.
3. 자바는 다른 언어에 비해 작성해야 하는 코드의 길이가 긴 편입니다.

3가지 플랫폼 형태
 - SE(Standard Edition): 일반적인 java application 개발 플랫폼
 - ME(Mobile Edition): 모바일이나 소형가전 탑재목적 개발 플랫폼
 - EE(Enterprise Edition): 기업용 솔루션 개발 플랫폼

JAVA 환경세팅시 필요요소
 - 필수: JDK(Java Development Kit) 개발 도구 키트
 - 선택: IDE(Integrated Development Environment) -> ex) intelij, ecplice, vscode...
 - JDK 내에 JRE(Java Runtime Environment) Java 실행환경 포함

명령문(Statement)

JAVA8에서의 변경 사항
1. 람다 표현식(lambda expression): 함수형 프로그래밍
2. 스트림 API(stream API): 데이터의 추상화
3. java.time 패키지: Joda-Time을 이용한 새로운 날짜와 시간 API
4. 나즈혼(Nashorn): 자바스크립트의 새로운 엔진

변수
1. 기본형(primitive type) 변수
- 정수형: byte, short, int, long
- 실수형: float, double
- 문자형: char
- 논리형: boolean
2. 참조형(reference type) 변수
- 클래스: Class
- 인터페이스: Interface
- 배열: Array
- 열거: Enum

상수(constant)
- final 키워드를 사용 
- 모두 대문자를 사용
- 여러 단어로 이루어진 이름의 경우에는 언더스코어(_)를 사용하여 구분
  ex) ORDER_NO

리터럴(literal)
1. 정수형 리터럴(Integer literals)은 123, -456과 같이 아라비아 숫자와 부호로 직접 표현됩니다.
2. 실수형 리터럴(floating-point literals)은 3.14, -45.6과 같이 소수 부분을 가지는 아라비아 숫자로 표현됩니다.
3. 논리형 리터럴(boolean literals)은 true나 false로 표현됩니다.
4. 문자형 리터럴(character literals)은 'a', 'Z'와 같이 작은따옴표('')로 감싸진 문자로 표현됩니다.
5. 문자열 리터럴(string literals)은 "자바", "홍길동"과 같이 큰따옴표("")로 감싸진 문자열로 표현됩니다.
6. null 리터럴(null literals)은 단 하나의 값인 null로 표현됩니다.

메모리 구조
- 메소드영역: 클래스정보 및 클래스변수가 저장되는 영역
- 힙영역: new로 생성된 인스턴스가 저장되는 영역
- 스택영역: 메소드가 호출시 메소드관계된 지역변수, 매개변수가 저장되는 영역이고 호출완료시 소멸

배열복사
1. System 클래스의 arraycopy() 메소드
2. Arrays 클래스의 copyOf() 메소드
3. Object 클래스의 clone() 메소드
4. for 문과 인덱스를 이용한 복사

클래스의 구성
- 클래스 / 필드(변수) / 메소드(실행기능)

패키지(package)
- 패키지(package)란 클래스와 인터페이스의 집합을 의미합니다.

제어자(modifier)
- 클래스와 클래스 멤버의 선언 시 사용하여 부가적인 의미를 부여하는 키워드
- 접근 제어자(access modifier)와 기타 제어자로 구분
- 접근제어자
 1. private: 같은 클래스내에서만 접근가능
 2. public: 어디서나 접근가능
 3. default: 같은 패키지만 접근가능
 4. protected: default + 다른패키지에서 상속받은 자식클래스까지 접근가능
public > protected > default > private
- 기타제어자
 1. final 제어자: 클래스, 메소드, 필드, 지역 변수
 2. static 제어자: 메소드, 필드, 초기화 블록
 3. abstract 제어자: 클래스, 메소드

변수구분
- 클래스변수: 클래스가 메모리에 올라간 시점부터 프로그램 종료시까지 (메소드 영역)
- 인스턴스변수: 인스턴스가 생성되고 소멸시까지 (힙 영역)
- 지역변수: 블록내에서 생성 후 블록 벗어날때까지 (스택 영역)

